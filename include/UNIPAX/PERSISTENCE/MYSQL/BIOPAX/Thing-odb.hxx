// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef THING_ODB_HXX
#define THING_ODB_HXX

// Begin prologue.
//
#include <odb/boost/version.hxx>
#if ODB_BOOST_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-boost interface versions
#endif
#include <boost/shared_ptr.hpp>
#include <odb/boost/smart-ptr/pointer-traits.hxx>
#include <odb/boost/smart-ptr/wrapper-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include <UNIPAX/KERNEL/BIOPAX/Thing.h>

#include <UNIPAX/PERSISTENCE/MYSQL/EXT/ImportSource-odb.hxx>
#include <UNIPAX/PERSISTENCE/MYSQL/EXT/UIBase-odb.hxx>
#include <UNIPAX/PERSISTENCE/MYSQL/EXT/UPBase-odb.hxx>

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#ifdef BOOST_TR1_MEMORY_HPP_INCLUDED
#  include <odb/tr1/wrapper-traits.hxx>
#  include <odb/tr1/pointer-traits.hxx>
#endif
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // Thing
  //
  template <>
  struct class_traits< ::UniPAX::Thing >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::UniPAX::Thing >
  {
    public:
    typedef ::UniPAX::Thing object_type;
    typedef ::boost::shared_ptr< ::UniPAX::Thing > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef object_traits< ::UniPAX::UPBase >::id_type id_type;

    static const bool auto_id = object_traits< ::UniPAX::UPBase >::auto_id;

    static const bool abstract = true;

    static id_type
    id (const object_type&);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>

namespace odb
{
  // Thing
  //
  template <typename A>
  struct pointer_query_columns< ::UniPAX::Thing, id_mysql, A >:
    pointer_query_columns< ::UniPAX::UIBase, id_mysql, A >
  {
    // UIBase
    //
    typedef pointer_query_columns< ::UniPAX::UIBase, id_mysql, A > UIBase;
  };

  template <>
  class access::object_traits_impl< ::UniPAX::Thing, id_mysql >:
    public access::object_traits< ::UniPAX::Thing >
  {
    public:
    typedef object_traits_impl< ::UniPAX::UPBase, id_mysql >::id_image_type id_image_type;

    struct image_type: object_traits_impl< ::UniPAX::UIBase, id_mysql >::image_type
    {
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);
  };

  // Thing
  //
  template <typename A>
  struct query_columns< ::UniPAX::Thing, id_mysql, A >:
    query_columns< ::UniPAX::UIBase, id_mysql, A >
  {
    // UIBase
    //
    typedef query_columns< ::UniPAX::UIBase, id_mysql, A > UIBase;
  };
}

#include <UNIPAX/PERSISTENCE/MYSQL/BIOPAX/Thing-odb.ixx>

#include <odb/post.hxx>

#endif // THING_ODB_HXX
