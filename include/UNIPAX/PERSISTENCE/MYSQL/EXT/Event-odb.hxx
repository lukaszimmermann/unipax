// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef EVENT_ODB_HXX
#define EVENT_ODB_HXX

// Begin prologue.
//
#include <odb/boost/version.hxx>
#if ODB_BOOST_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-boost interface versions
#endif
#include <boost/shared_ptr.hpp>
#include <odb/boost/smart-ptr/pointer-traits.hxx>
#include <odb/boost/smart-ptr/wrapper-traits.hxx>
#include <odb/boost/date-time/mysql/posix-time-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include <UNIPAX/KERNEL/EXT/Event.h>

#include <UNIPAX/PERSISTENCE/MYSQL/BIOPAX/ControlledVocabulary-odb.hxx>
#include <UNIPAX/PERSISTENCE/MYSQL/BIOPAX/Entity-odb.hxx>
#include <UNIPAX/PERSISTENCE/MYSQL/BIOPAX/EntityFeature-odb.hxx>
#include <UNIPAX/PERSISTENCE/MYSQL/BIOPAX/Evidence-odb.hxx>
#include <UNIPAX/PERSISTENCE/MYSQL/BIOPAX/EvidenceCodeVocabulary-odb.hxx>
#include <UNIPAX/PERSISTENCE/MYSQL/BIOPAX/ExperimentalForm-odb.hxx>
#include <UNIPAX/PERSISTENCE/MYSQL/BIOPAX/ExperimentalFormVocabulary-odb.hxx>
#include <UNIPAX/PERSISTENCE/MYSQL/BIOPAX/Interaction-odb.hxx>
#include <UNIPAX/PERSISTENCE/MYSQL/BIOPAX/InteractionVocabulary-odb.hxx>
#include <UNIPAX/PERSISTENCE/MYSQL/BIOPAX/Provenance-odb.hxx>
#include <UNIPAX/PERSISTENCE/MYSQL/BIOPAX/Score-odb.hxx>
#include <UNIPAX/PERSISTENCE/MYSQL/BIOPAX/SequenceLocation-odb.hxx>
#include <UNIPAX/PERSISTENCE/MYSQL/BIOPAX/SequenceRegionVocabulary-odb.hxx>
#include <UNIPAX/PERSISTENCE/MYSQL/BIOPAX/Thing-odb.hxx>
#include <UNIPAX/PERSISTENCE/MYSQL/BIOPAX/UtilityClass-odb.hxx>
#include <UNIPAX/PERSISTENCE/MYSQL/BIOPAX/Xref-odb.hxx>
#include <UNIPAX/PERSISTENCE/MYSQL/EXT/Delay-odb.hxx>
#include <UNIPAX/PERSISTENCE/MYSQL/EXT/EventAssignment-odb.hxx>
#include <UNIPAX/PERSISTENCE/MYSQL/EXT/ImportSource-odb.hxx>
#include <UNIPAX/PERSISTENCE/MYSQL/EXT/Math-odb.hxx>
#include <UNIPAX/PERSISTENCE/MYSQL/EXT/Priority-odb.hxx>
#include <UNIPAX/PERSISTENCE/MYSQL/EXT/SBase-odb.hxx>
#include <UNIPAX/PERSISTENCE/MYSQL/EXT/Trigger-odb.hxx>
#include <UNIPAX/PERSISTENCE/MYSQL/EXT/UIBase-odb.hxx>
#include <UNIPAX/PERSISTENCE/MYSQL/EXT/UPBase-odb.hxx>

#include <memory>
#include <cstddef>
#include <string>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#ifdef BOOST_TR1_MEMORY_HPP_INCLUDED
#  include <odb/tr1/wrapper-traits.hxx>
#  include <odb/tr1/pointer-traits.hxx>
#endif
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/polymorphic-info.hxx>
#include <odb/result.hxx>
#include <odb/polymorphic-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // Event
  //
  template <>
  struct class_traits< ::UniPAX::Event >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::UniPAX::Event >
  {
    public:
    typedef ::UniPAX::Event object_type;
    typedef ::boost::shared_ptr< ::UniPAX::Event > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = true;

    typedef ::UniPAX::Event root_type;
    typedef ::std::string discriminator_type;
    typedef polymorphic_map<object_type> map_type;
    typedef polymorphic_concrete_info<object_type> info_type;

    static const std::size_t depth = 1UL;

    typedef object_traits< ::UniPAX::UPBase >::id_type id_type;

    static const bool auto_id = object_traits< ::UniPAX::UPBase >::auto_id;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>

namespace odb
{
  // Event
  //
  template <typename A>
  struct pointer_query_columns< ::UniPAX::Event, id_mysql, A >:
    pointer_query_columns< ::UniPAX::SBase, id_mysql, A >
  {
    // SBase
    //
    typedef pointer_query_columns< ::UniPAX::SBase, id_mysql, A > SBase;

    // typeid_
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    typeid__type_;

    static const typeid__type_ typeid_;

    // useValuesFromTriggerTime
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    useValuesFromTriggerTime_type_;

    static const useValuesFromTriggerTime_type_ useValuesFromTriggerTime;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    id_type_;

    static const id_type_ id;

    // name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    name_type_;

    static const name_type_ name;

    // priority
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::UnipaxId,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    priority_type_;

    static const priority_type_ priority;

    // delay
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::UnipaxId,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    delay_type_;

    static const delay_type_ delay;

    // trigger
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::UnipaxId,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    trigger_type_;

    static const trigger_type_ trigger;
  };

  template <typename A>
  const typename pointer_query_columns< ::UniPAX::Event, id_mysql, A >::typeid__type_
  pointer_query_columns< ::UniPAX::Event, id_mysql, A >::
  typeid_ (A::table_name, "`typeid`", 0);

  template <typename A>
  const typename pointer_query_columns< ::UniPAX::Event, id_mysql, A >::useValuesFromTriggerTime_type_
  pointer_query_columns< ::UniPAX::Event, id_mysql, A >::
  useValuesFromTriggerTime (A::table_name, "`useValuesFromTriggerTime`", 0);

  template <typename A>
  const typename pointer_query_columns< ::UniPAX::Event, id_mysql, A >::id_type_
  pointer_query_columns< ::UniPAX::Event, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename pointer_query_columns< ::UniPAX::Event, id_mysql, A >::name_type_
  pointer_query_columns< ::UniPAX::Event, id_mysql, A >::
  name (A::table_name, "`name`", 0);

  template <typename A>
  const typename pointer_query_columns< ::UniPAX::Event, id_mysql, A >::priority_type_
  pointer_query_columns< ::UniPAX::Event, id_mysql, A >::
  priority (A::table_name, "`priority`", 0);

  template <typename A>
  const typename pointer_query_columns< ::UniPAX::Event, id_mysql, A >::delay_type_
  pointer_query_columns< ::UniPAX::Event, id_mysql, A >::
  delay (A::table_name, "`delay`", 0);

  template <typename A>
  const typename pointer_query_columns< ::UniPAX::Event, id_mysql, A >::trigger_type_
  pointer_query_columns< ::UniPAX::Event, id_mysql, A >::
  trigger (A::table_name, "`trigger`", 0);

  template <>
  class access::object_traits_impl< ::UniPAX::Event, id_mysql >:
    public access::object_traits< ::UniPAX::Event >
  {
    public:
    typedef polymorphic_entry<object_type, id_mysql> entry_type;
    typedef object_traits_impl<root_type, id_mysql> root_traits;

    struct discriminator_image_type
    {
      details::buffer discriminator_value;
      unsigned long discriminator_size;
      my_bool discriminator_null;

      std::size_t version;
    };

    typedef object_traits_impl< ::UniPAX::UPBase, id_mysql >::id_image_type id_image_type;

    static map_type* map;
    static const info_type info;

    struct image_type: object_traits_impl< ::UniPAX::SBase, id_mysql >::image_type
    {
      // typeid_
      //
      details::buffer typeid_value;
      unsigned long typeid_size;
      my_bool typeid_null;

      // useValuesFromTriggerTime
      //
      signed char useValuesFromTriggerTime_value;
      my_bool useValuesFromTriggerTime_null;

      // id
      //
      details::buffer id_value;
      unsigned long id_size;
      my_bool id_null;

      // name
      //
      details::buffer name_value;
      unsigned long name_size;
      my_bool name_null;

      // priority
      //
      unsigned long long priority_value;
      my_bool priority_null;

      // delay
      //
      unsigned long long delay_value;
      my_bool delay_null;

      // trigger
      //
      unsigned long long trigger_value;
      my_bool trigger_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // eventAssignment
    //
    struct eventAssignment_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::boost::shared_ptr< ::UniPAX::EventAssignment > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mysql::container_statements< eventAssignment_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        unsigned long long index_value;
        my_bool index_null;

        // value
        //
        unsigned long long value_value;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    struct priority_tag;
    struct delay_tag;
    struct trigger_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static discriminator_type
    discriminator (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef
    mysql::polymorphic_root_object_statements<object_type>
    statements_type;

    typedef statements_type root_statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 13UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 1UL;
    static const std::size_t managed_optimistic_column_count = 0UL;
    static const std::size_t discriminator_column_count = 1UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char find_discriminator_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&, bool top = true, bool dyn = true);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&, bool dyn = true);

    static bool
    reload (database&, object_type&, bool dyn = true);

    static void
    update (database&, const object_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const id_type&, bool top = true, bool dyn = true);

    static void
    erase (database&, const object_type&, bool top = true, bool dyn = true);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);

    static void
    discriminator_ (statements_type&,
                    const id_type&,
                    discriminator_type*);
  };

  template <>
  class access::object_traits_impl< ::UniPAX::Event, id_common >:
    public access::object_traits_impl< ::UniPAX::Event, id_mysql >
  {
  };

  // Event
  //
  template <>
  struct alias_traits<
    ::UniPAX::Priority,
    id_mysql,
    access::object_traits_impl< ::UniPAX::Event, id_mysql >::priority_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::UniPAX::Delay,
    id_mysql,
    access::object_traits_impl< ::UniPAX::Event, id_mysql >::delay_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::UniPAX::Trigger,
    id_mysql,
    access::object_traits_impl< ::UniPAX::Event, id_mysql >::trigger_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::UniPAX::Event, id_mysql >
  {
    // priority
    //
    typedef
    odb::alias_traits<
      ::UniPAX::Priority,
      id_mysql,
      access::object_traits_impl< ::UniPAX::Event, id_mysql >::priority_tag>
    priority_alias_;

    // delay
    //
    typedef
    odb::alias_traits<
      ::UniPAX::Delay,
      id_mysql,
      access::object_traits_impl< ::UniPAX::Event, id_mysql >::delay_tag>
    delay_alias_;

    // trigger
    //
    typedef
    odb::alias_traits<
      ::UniPAX::Trigger,
      id_mysql,
      access::object_traits_impl< ::UniPAX::Event, id_mysql >::trigger_tag>
    trigger_alias_;
  };

  template <typename A>
  struct query_columns< ::UniPAX::Event, id_mysql, A >:
    query_columns_base< ::UniPAX::Event, id_mysql >,
    query_columns< ::UniPAX::SBase, id_mysql, A >
  {
    // SBase
    //
    typedef query_columns< ::UniPAX::SBase, id_mysql, A > SBase;

    // typeid_
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    typeid__type_;

    static const typeid__type_ typeid_;

    // useValuesFromTriggerTime
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    useValuesFromTriggerTime_type_;

    static const useValuesFromTriggerTime_type_ useValuesFromTriggerTime;

    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    id_type_;

    static const id_type_ id;

    // name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    name_type_;

    static const name_type_ name;

    // priority
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::UnipaxId,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    priority_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::UniPAX::Priority,
        id_mysql,
        priority_alias_ > >
    priority_pointer_type_;

    struct priority_type_: priority_pointer_type_, priority_column_type_
    {
      priority_type_ (const char* t, const char* c, const char* conv)
        : priority_column_type_ (t, c, conv)
      {
      }
    };

    static const priority_type_ priority;

    // delay
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::UnipaxId,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    delay_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::UniPAX::Delay,
        id_mysql,
        delay_alias_ > >
    delay_pointer_type_;

    struct delay_type_: delay_pointer_type_, delay_column_type_
    {
      delay_type_ (const char* t, const char* c, const char* conv)
        : delay_column_type_ (t, c, conv)
      {
      }
    };

    static const delay_type_ delay;

    // trigger
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::UnipaxId,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    trigger_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::UniPAX::Trigger,
        id_mysql,
        trigger_alias_ > >
    trigger_pointer_type_;

    struct trigger_type_: trigger_pointer_type_, trigger_column_type_
    {
      trigger_type_ (const char* t, const char* c, const char* conv)
        : trigger_column_type_ (t, c, conv)
      {
      }
    };

    static const trigger_type_ trigger;
  };

  template <typename A>
  const typename query_columns< ::UniPAX::Event, id_mysql, A >::typeid__type_
  query_columns< ::UniPAX::Event, id_mysql, A >::
  typeid_ (A::table_name, "`typeid`", 0);

  template <typename A>
  const typename query_columns< ::UniPAX::Event, id_mysql, A >::useValuesFromTriggerTime_type_
  query_columns< ::UniPAX::Event, id_mysql, A >::
  useValuesFromTriggerTime (A::table_name, "`useValuesFromTriggerTime`", 0);

  template <typename A>
  const typename query_columns< ::UniPAX::Event, id_mysql, A >::id_type_
  query_columns< ::UniPAX::Event, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::UniPAX::Event, id_mysql, A >::name_type_
  query_columns< ::UniPAX::Event, id_mysql, A >::
  name (A::table_name, "`name`", 0);

  template <typename A>
  const typename query_columns< ::UniPAX::Event, id_mysql, A >::priority_type_
  query_columns< ::UniPAX::Event, id_mysql, A >::
  priority (A::table_name, "`priority`", 0);

  template <typename A>
  const typename query_columns< ::UniPAX::Event, id_mysql, A >::delay_type_
  query_columns< ::UniPAX::Event, id_mysql, A >::
  delay (A::table_name, "`delay`", 0);

  template <typename A>
  const typename query_columns< ::UniPAX::Event, id_mysql, A >::trigger_type_
  query_columns< ::UniPAX::Event, id_mysql, A >::
  trigger (A::table_name, "`trigger`", 0);
}

#include <UNIPAX/PERSISTENCE/MYSQL/EXT/Event-odb.ixx>

#include <odb/post.hxx>

#endif // EVENT_ODB_HXX
