// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef EVENT_ODB_HXX
#define EVENT_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 10800UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

// Begin prologue.
//
#include <odb/boost/version.hxx>
#if ODB_BOOST_VERSION != 1080000 // 1.8.0
#  error ODB and C++ compilers see different libodb-boost interface versions
#endif
#include <boost/shared_ptr.hpp>
#include <odb/boost/smart-ptr/pointer-traits.hxx>
#include <odb/boost/smart-ptr/wrapper-traits.hxx>
//
// End prologue.

#include <UNIPAX/KERNEL/EXT/Event.h>

#include <UNIPAX/PERSISTENCE/ORACLE/BIOPAX/ControlledVocabulary-odb.hxx>

#include <UNIPAX/PERSISTENCE/ORACLE/BIOPAX/Entity-odb.hxx>

#include <UNIPAX/PERSISTENCE/ORACLE/BIOPAX/EntityFeature-odb.hxx>

#include <UNIPAX/PERSISTENCE/ORACLE/BIOPAX/Evidence-odb.hxx>

#include <UNIPAX/PERSISTENCE/ORACLE/BIOPAX/EvidenceCodeVocabulary-odb.hxx>

#include <UNIPAX/PERSISTENCE/ORACLE/BIOPAX/ExperimentalForm-odb.hxx>

#include <UNIPAX/PERSISTENCE/ORACLE/BIOPAX/ExperimentalFormVocabulary-odb.hxx>

#include <UNIPAX/PERSISTENCE/ORACLE/BIOPAX/Interaction-odb.hxx>

#include <UNIPAX/PERSISTENCE/ORACLE/BIOPAX/InteractionVocabulary-odb.hxx>

#include <UNIPAX/PERSISTENCE/ORACLE/BIOPAX/Provenance-odb.hxx>

#include <UNIPAX/PERSISTENCE/ORACLE/BIOPAX/Score-odb.hxx>

#include <UNIPAX/PERSISTENCE/ORACLE/BIOPAX/SequenceLocation-odb.hxx>

#include <UNIPAX/PERSISTENCE/ORACLE/BIOPAX/SequenceRegionVocabulary-odb.hxx>

#include <UNIPAX/PERSISTENCE/ORACLE/BIOPAX/Thing-odb.hxx>

#include <UNIPAX/PERSISTENCE/ORACLE/BIOPAX/UtilityClass-odb.hxx>

#include <UNIPAX/PERSISTENCE/ORACLE/BIOPAX/Xref-odb.hxx>

#include <UNIPAX/PERSISTENCE/ORACLE/EXT/Delay-odb.hxx>

#include <UNIPAX/PERSISTENCE/ORACLE/EXT/EventAssignment-odb.hxx>

#include <UNIPAX/PERSISTENCE/ORACLE/EXT/ImportSource-odb.hxx>

#include <UNIPAX/PERSISTENCE/ORACLE/EXT/Math-odb.hxx>

#include <UNIPAX/PERSISTENCE/ORACLE/EXT/Priority-odb.hxx>

#include <UNIPAX/PERSISTENCE/ORACLE/EXT/SBase-odb.hxx>

#include <UNIPAX/PERSISTENCE/ORACLE/EXT/Trigger-odb.hxx>

#include <UNIPAX/PERSISTENCE/ORACLE/EXT/UPBase-odb.hxx>

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#ifdef BOOST_TR1_MEMORY_HPP_INCLUDED
#  include <odb/tr1/wrapper-traits.hxx>
#  include <odb/tr1/pointer-traits.hxx>
#endif
#include <odb/container-traits.hxx>
#include <odb/result.hxx>

#include <odb/details/buffer.hxx>
#include <odb/details/unused.hxx>

#include <odb/oracle/version.hxx>
#include <odb/oracle/forward.hxx>
#include <odb/oracle/oracle-types.hxx>
#include <odb/oracle/query.hxx>

namespace odb
{
  // Event
  //
  template <>
  struct class_traits< ::UniPAX::Event >
  {
    static const class_kind kind = class_object;
  };

  template <const char* table>
  struct pointer_query_columns< ::UniPAX::Event, table >: pointer_query_columns< ::UniPAX::SBase, table >
  {
    // SBase
    //
    typedef pointer_query_columns< ::UniPAX::SBase, table > SBase;

    // useValuesFromTriggerTime
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        bool,
        oracle::id_int32 >::query_type,
      oracle::id_int32 >
    useValuesFromTriggerTime_type_;

    static const useValuesFromTriggerTime_type_ useValuesFromTriggerTime;

    // id
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        ::std::string,
        oracle::id_string >::query_type,
      oracle::id_string >
    id_type_;

    static const id_type_ id;

    // name
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        ::std::string,
        oracle::id_string >::query_type,
      oracle::id_string >
    name_type_;

    static const name_type_ name;

    // priority
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        long long unsigned int,
        oracle::id_big_int >::query_type,
      oracle::id_big_int >
    priority_type_;

    static const priority_type_ priority;

    // delay
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        long long unsigned int,
        oracle::id_big_int >::query_type,
      oracle::id_big_int >
    delay_type_;

    static const delay_type_ delay;

    // trigger
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        long long unsigned int,
        oracle::id_big_int >::query_type,
      oracle::id_big_int >
    trigger_type_;

    static const trigger_type_ trigger;
  };

  template <const char* table>
  const typename pointer_query_columns< ::UniPAX::Event, table >::useValuesFromTriggerTime_type_
  pointer_query_columns< ::UniPAX::Event, table >::useValuesFromTriggerTime (table, "\"useValuesFromTriggerTime\"", 1);

  template <const char* table>
  const typename pointer_query_columns< ::UniPAX::Event, table >::id_type_
  pointer_query_columns< ::UniPAX::Event, table >::id (table, "\"id\"", 512);

  template <const char* table>
  const typename pointer_query_columns< ::UniPAX::Event, table >::name_type_
  pointer_query_columns< ::UniPAX::Event, table >::name (table, "\"name\"", 512);

  template <const char* table>
  const typename pointer_query_columns< ::UniPAX::Event, table >::priority_type_
  pointer_query_columns< ::UniPAX::Event, table >::priority (table, "\"priority\"", 20);

  template <const char* table>
  const typename pointer_query_columns< ::UniPAX::Event, table >::delay_type_
  pointer_query_columns< ::UniPAX::Event, table >::delay (table, "\"delay\"", 20);

  template <const char* table>
  const typename pointer_query_columns< ::UniPAX::Event, table >::trigger_type_
  pointer_query_columns< ::UniPAX::Event, table >::trigger (table, "\"trigger\"", 20);

  template <>
  class access::object_traits< ::UniPAX::Event >
  {
    public:
    typedef ::UniPAX::Event object_type;
    typedef ::boost::shared_ptr< ::UniPAX::Event > pointer_type;
    typedef object_traits< ::UniPAX::UPBase >::id_type id_type;

    static const bool auto_id = object_traits< ::UniPAX::UPBase >::auto_id;

    typedef object_traits< ::UniPAX::UPBase >::id_image_type id_image_type;

    struct image_type: object_traits< ::UniPAX::SBase >::image_type
    {
      // useValuesFromTriggerTime
      //
      unsigned int useValuesFromTriggerTime_value;
      sb2 useValuesFromTriggerTime_indicator;

      // id
      //
      char id_value[512];
      ub2 id_size;
      sb2 id_indicator;

      // name
      //
      char name_value[512];
      ub2 name_size;
      sb2 name_indicator;

      // priority
      //
      char priority_value[12];
      ub2 priority_size;
      sb2 priority_indicator;

      // delay
      //
      char delay_value[12];
      ub2 delay_size;
      sb2 delay_indicator;

      // trigger
      //
      char trigger_value[12];
      ub2 trigger_size;
      sb2 trigger_indicator;

      std::size_t version;

      oracle::change_callback change_callback_;

      oracle::change_callback*
      change_callback ()
      {
        return &change_callback_;
      }
    };

    // eventAssignment
    //
    struct eventAssignment_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t cond_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const char insert_one_statement[];
      static const char select_all_statement[];
      static const char delete_all_statement[];

      typedef ::std::vector< ::boost::shared_ptr< ::UniPAX::EventAssignment > > container_type;
      typedef odb::access::container_traits< container_type > container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef oracle::container_statements< eventAssignment_traits > statements_type;

      struct cond_image_type
      {
        // index
        //
        char index_value[12];
        ub2 index_size;
        sb2 index_indicator;

        std::size_t version;
      };

      struct data_image_type
      {
        // index
        //
        char index_value[12];
        ub2 index_size;
        sb2 index_indicator;

        // value
        //
        char value_value[12];
        ub2 value_size;
        sb2 value_indicator;

        std::size_t version;
      };

      static void
      bind (oracle::bind*,
            const oracle::bind* id,
            std::size_t id_size,
            cond_image_type&);

      static void
      bind (oracle::bind*,
            const oracle::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      init (data_image_type&, index_type, const value_type&);

      static void
      init (index_type&, value_type&, const data_image_type&, database&);

      static void
      insert_one (index_type, const value_type&, void*);

      static bool
      load_all (index_type&, value_type&, void*);

      static void
      delete_all (void*);

      static void
      persist (const container_type&,
               const oracle::binding& id,
               statements_type&);

      static void
      load (container_type&,
            const oracle::binding& id,
            statements_type&);

      static void
      update (const container_type&,
              const oracle::binding& id,
              statements_type&);

      static void
      erase (const oracle::binding& id, statements_type&);
    };

    static id_type
    id (const object_type&);

    static id_type
    id (const image_type&);

    static void
    bind (oracle::bind*, image_type&, oracle::statement_kind);

    static void
    bind (oracle::bind*, id_image_type&);

    static bool
    init (image_type&, const object_type&, oracle::statement_kind);

    static void
    init (object_type&, const image_type&, database&);

    static void
    init (id_image_type&, const id_type&);

    typedef oracle::query query_base_type;

    struct query_type;
    struct container_statement_cache_type;

    static const std::size_t column_count = 12UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (oracle::object_statements< object_type >&, const id_type&);

    static void
    load_ (oracle::object_statements< object_type >&, object_type&);
  };

  // Event
  //
  template <>
  struct query_columns_base< ::UniPAX::Event >
  {
    // priority
    //
    static const char priority_alias_[];

    // delay
    //
    static const char delay_alias_[];

    // trigger
    //
    static const char trigger_alias_[];
  };

  template <const char* table>
  struct query_columns< ::UniPAX::Event, table >:
    query_columns_base< ::UniPAX::Event >,
    query_columns< ::UniPAX::SBase, table >
  {
    // SBase
    //
    typedef query_columns< ::UniPAX::SBase, table > SBase;

    // useValuesFromTriggerTime
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        bool,
        oracle::id_int32 >::query_type,
      oracle::id_int32 >
    useValuesFromTriggerTime_type_;

    static const useValuesFromTriggerTime_type_ useValuesFromTriggerTime;

    // id
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        ::std::string,
        oracle::id_string >::query_type,
      oracle::id_string >
    id_type_;

    static const id_type_ id;

    // name
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        ::std::string,
        oracle::id_string >::query_type,
      oracle::id_string >
    name_type_;

    static const name_type_ name;

    // priority
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        long long unsigned int,
        oracle::id_big_int >::query_type,
      oracle::id_big_int >
    priority_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::UniPAX::Priority,
        priority_alias_ > >
    priority_pointer_type_;

    struct priority_type_: priority_pointer_type_, priority_column_type_
    {
      priority_type_ (const char* t,
                      const char* c,
                      unsigned short p = 0xFFF,
                      short s = 0xFFF)
        : priority_column_type_ (t, c, p, s)
      {
      }
    };

    static const priority_type_ priority;

    // delay
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        long long unsigned int,
        oracle::id_big_int >::query_type,
      oracle::id_big_int >
    delay_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::UniPAX::Delay,
        delay_alias_ > >
    delay_pointer_type_;

    struct delay_type_: delay_pointer_type_, delay_column_type_
    {
      delay_type_ (const char* t,
                   const char* c,
                   unsigned short p = 0xFFF,
                   short s = 0xFFF)
        : delay_column_type_ (t, c, p, s)
      {
      }
    };

    static const delay_type_ delay;

    // trigger
    //
    typedef
    oracle::query_column<
      oracle::value_traits<
        long long unsigned int,
        oracle::id_big_int >::query_type,
      oracle::id_big_int >
    trigger_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::UniPAX::Trigger,
        trigger_alias_ > >
    trigger_pointer_type_;

    struct trigger_type_: trigger_pointer_type_, trigger_column_type_
    {
      trigger_type_ (const char* t,
                     const char* c,
                     unsigned short p = 0xFFF,
                     short s = 0xFFF)
        : trigger_column_type_ (t, c, p, s)
      {
      }
    };

    static const trigger_type_ trigger;
  };

  template <const char* table>
  const typename query_columns< ::UniPAX::Event, table >::useValuesFromTriggerTime_type_
  query_columns< ::UniPAX::Event, table >::useValuesFromTriggerTime (table, "\"useValuesFromTriggerTime\"", 1);

  template <const char* table>
  const typename query_columns< ::UniPAX::Event, table >::id_type_
  query_columns< ::UniPAX::Event, table >::id (table, "\"id\"", 512);

  template <const char* table>
  const typename query_columns< ::UniPAX::Event, table >::name_type_
  query_columns< ::UniPAX::Event, table >::name (table, "\"name\"", 512);

  template <const char* table>
  const typename query_columns< ::UniPAX::Event, table >::priority_type_
  query_columns< ::UniPAX::Event, table >::priority (table, "\"priority\"", 20);

  template <const char* table>
  const typename query_columns< ::UniPAX::Event, table >::delay_type_
  query_columns< ::UniPAX::Event, table >::delay (table, "\"delay\"", 20);

  template <const char* table>
  const typename query_columns< ::UniPAX::Event, table >::trigger_type_
  query_columns< ::UniPAX::Event, table >::trigger (table, "\"trigger\"", 20);

  struct access::object_traits< ::UniPAX::Event >::query_type:
    query_base_type,
    query_columns< ::UniPAX::Event, table_name >
  {
    query_type ();
    query_type (bool);
    query_type (const char*);
    query_type (const std::string&);
    query_type (const query_base_type&);
  };
}

#include <UNIPAX/PERSISTENCE/ORACLE/EXT/Event-odb.ixx>

// Begin epilogue.
//
//
// End epilogue.

#include <odb/post.hxx>

#endif // EVENT_ODB_HXX
