// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include <UNIPAX/PERSISTENCE/MYSQL/EXT/UPBase-odb.hxx>

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/mysql/traits.hxx>
#include <odb/mysql/database.hxx>
#include <odb/mysql/transaction.hxx>
#include <odb/mysql/connection.hxx>
#include <odb/mysql/statement.hxx>
#include <odb/mysql/statement-cache.hxx>
#include <odb/mysql/simple-object-statements.hxx>
#include <odb/mysql/container-statements.hxx>
#include <odb/mysql/exceptions.hxx>
#include <odb/mysql/simple-object-result.hxx>
#include <odb/mysql/enum.hxx>

namespace odb
{
  // UPBase
  //

  access::object_traits_impl< ::UniPAX::UPBase, id_mysql >::id_type
  access::object_traits_impl< ::UniPAX::UPBase, id_mysql >::
  id (const image_type& i)
  {
    mysql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      mysql::value_traits<
          ::UnipaxId,
          mysql::id_ulonglong >::set_value (
        id,
        i.unipaxId_value,
        i.unipaxId_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::UniPAX::UPBase, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // unipaxId
    //
    t[0UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::UniPAX::UPBase, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // unipaxId
    //
    if (sk != statement_update)
    {
      b[n].buffer_type = MYSQL_TYPE_LONGLONG;
      b[n].is_unsigned = 1;
      b[n].buffer = &i.unipaxId_value;
      b[n].is_null = &i.unipaxId_null;
      n++;
    }
  }

  void access::object_traits_impl< ::UniPAX::UPBase, id_mysql >::
  bind (MYSQL_BIND* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::UniPAX::UPBase, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // unipaxId
    //
    if (sk == statement_insert)
    {
      ::UnipaxId const& v =
        o.unipaxId;

      bool is_null (false);
      mysql::value_traits<
          ::UnipaxId,
          mysql::id_ulonglong >::set_image (
        i.unipaxId_value, is_null, v);
      i.unipaxId_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::UniPAX::UPBase, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // unipaxId
    //
    {
      ::UnipaxId& v =
        o.unipaxId;

      mysql::value_traits<
          ::UnipaxId,
          mysql::id_ulonglong >::set_value (
        v,
        i.unipaxId_value,
        i.unipaxId_null);
    }
  }

  void access::object_traits_impl< ::UniPAX::UPBase, id_mysql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      mysql::value_traits<
          ::UnipaxId,
          mysql::id_ulonglong >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }
}

#include <odb/post.hxx>
