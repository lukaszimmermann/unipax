// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include <UNIPAX/PERSISTENCE/MYSQL/EXT/SBase-odb.hxx>

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/mysql/traits.hxx>
#include <odb/mysql/database.hxx>
#include <odb/mysql/transaction.hxx>
#include <odb/mysql/connection.hxx>
#include <odb/mysql/statement.hxx>
#include <odb/mysql/statement-cache.hxx>
#include <odb/mysql/simple-object-statements.hxx>
#include <odb/mysql/container-statements.hxx>
#include <odb/mysql/exceptions.hxx>
#include <odb/mysql/simple-object-result.hxx>
#include <odb/mysql/enum.hxx>

namespace odb
{
  // SBase
  //

  bool access::object_traits_impl< ::UniPAX::SBase, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // UIBase base
    //
    if (object_traits_impl< ::UniPAX::UIBase, id_mysql >::grow (
          i, t + 0UL))
      grew = true;

    // metaId
    //
    if (t[2UL])
    {
      i.metaId_value.capacity (i.metaId_size);
      grew = true;
    }

    // sboTerm
    //
    if (t[3UL])
    {
      i.sboTerm_value.capacity (i.sboTerm_size);
      grew = true;
    }

    // notes
    //
    if (t[4UL])
    {
      i.notes_value.capacity (i.notes_size);
      grew = true;
    }

    // annotation
    //
    if (t[5UL])
    {
      i.annotation_value.capacity (i.annotation_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::UniPAX::SBase, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // UIBase base
    //
    object_traits_impl< ::UniPAX::UIBase, id_mysql >::bind (b + n, i, sk);
    n += sk == statement_update ? 1UL : 2UL;

    // metaId
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.metaId_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.metaId_value.capacity ());
    b[n].length = &i.metaId_size;
    b[n].is_null = &i.metaId_null;
    n++;

    // sboTerm
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.sboTerm_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.sboTerm_value.capacity ());
    b[n].length = &i.sboTerm_size;
    b[n].is_null = &i.sboTerm_null;
    n++;

    // notes
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.notes_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.notes_value.capacity ());
    b[n].length = &i.notes_size;
    b[n].is_null = &i.notes_null;
    n++;

    // annotation
    //
    b[n].buffer_type = MYSQL_TYPE_STRING;
    b[n].buffer = i.annotation_value.data ();
    b[n].buffer_length = static_cast<unsigned long> (
      i.annotation_value.capacity ());
    b[n].length = &i.annotation_size;
    b[n].is_null = &i.annotation_null;
    n++;
  }

  bool access::object_traits_impl< ::UniPAX::SBase, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // UIBase base
    //
    if (object_traits_impl< ::UniPAX::UIBase, id_mysql >::init (i, o, sk))
      grew = true;

    // metaId
    //
    {
      ::std::string const& v =
        o.metaId;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.metaId_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.metaId_value,
        size,
        is_null,
        v);
      i.metaId_null = is_null;
      i.metaId_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.metaId_value.capacity ());
    }

    // sboTerm
    //
    {
      ::std::string const& v =
        o.sboTerm;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.sboTerm_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.sboTerm_value,
        size,
        is_null,
        v);
      i.sboTerm_null = is_null;
      i.sboTerm_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.sboTerm_value.capacity ());
    }

    // notes
    //
    {
      ::std::string const& v =
        o.notes;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.notes_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.notes_value,
        size,
        is_null,
        v);
      i.notes_null = is_null;
      i.notes_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.notes_value.capacity ());
    }

    // annotation
    //
    {
      ::std::string const& v =
        o.annotation;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.annotation_value.capacity ());
      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_image (
        i.annotation_value,
        size,
        is_null,
        v);
      i.annotation_null = is_null;
      i.annotation_size = static_cast<unsigned long> (size);
      grew = grew || (cap != i.annotation_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::UniPAX::SBase, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // UIBase base
    //
    object_traits_impl< ::UniPAX::UIBase, id_mysql >::init (o, i, db);

    // metaId
    //
    {
      ::std::string& v =
        o.metaId;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.metaId_value,
        i.metaId_size,
        i.metaId_null);
    }

    // sboTerm
    //
    {
      ::std::string& v =
        o.sboTerm;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.sboTerm_value,
        i.sboTerm_size,
        i.sboTerm_null);
    }

    // notes
    //
    {
      ::std::string& v =
        o.notes;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.notes_value,
        i.notes_size,
        i.notes_null);
    }

    // annotation
    //
    {
      ::std::string& v =
        o.annotation;

      mysql::value_traits<
          ::std::string,
          mysql::id_string >::set_value (
        v,
        i.annotation_value,
        i.annotation_size,
        i.annotation_null);
    }
  }
}

#include <odb/post.hxx>
