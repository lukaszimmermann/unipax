// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include <UNIPAX/PERSISTENCE/MYSQL/EXT/UIBase-odb.hxx>

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/mysql/traits.hxx>
#include <odb/mysql/database.hxx>
#include <odb/mysql/transaction.hxx>
#include <odb/mysql/connection.hxx>
#include <odb/mysql/statement.hxx>
#include <odb/mysql/statement-cache.hxx>
#include <odb/mysql/simple-object-statements.hxx>
#include <odb/mysql/container-statements.hxx>
#include <odb/mysql/exceptions.hxx>
#include <odb/mysql/simple-object-result.hxx>
#include <odb/mysql/enum.hxx>

namespace odb
{
  // UIBase
  //

  const char alias_traits<  ::UniPAX::ImportSource,
    id_mysql,
    access::object_traits_impl< ::UniPAX::UIBase, id_mysql >::unipaxSource_tag>::
  table_name[] = "`unipaxSource_ImportSource`";

  bool access::object_traits_impl< ::UniPAX::UIBase, id_mysql >::
  grow (image_type& i,
        my_bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // UPBase base
    //
    if (object_traits_impl< ::UniPAX::UPBase, id_mysql >::grow (
          i, t + 0UL))
      grew = true;

    // unipaxSource
    //
    t[1UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::UniPAX::UIBase, id_mysql >::
  bind (MYSQL_BIND* b,
        image_type& i,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    std::size_t n (0);

    // UPBase base
    //
    object_traits_impl< ::UniPAX::UPBase, id_mysql >::bind (b + n, i, sk);
    n += sk == statement_update ? 0UL : 1UL;

    // unipaxSource
    //
    b[n].buffer_type = MYSQL_TYPE_LONGLONG;
    b[n].is_unsigned = 1;
    b[n].buffer = &i.unipaxSource_value;
    b[n].is_null = &i.unipaxSource_null;
    n++;
  }

  bool access::object_traits_impl< ::UniPAX::UIBase, id_mysql >::
  init (image_type& i,
        const object_type& o,
        mysql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace mysql;

    bool grew (false);

    // UPBase base
    //
    if (object_traits_impl< ::UniPAX::UPBase, id_mysql >::init (i, o, sk))
      grew = true;

    // unipaxSource
    //
    {
      ::boost::shared_ptr< ::UniPAX::ImportSource > const& v =
        o.unipaxSource;

      typedef object_traits< ::UniPAX::ImportSource > obj_traits;
      typedef odb::pointer_traits< ::boost::shared_ptr< ::UniPAX::ImportSource > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_image (
          i.unipaxSource_value, is_null, id);
        i.unipaxSource_null = is_null;
      }
      else
        i.unipaxSource_null = 1;
    }

    return grew;
  }

  void access::object_traits_impl< ::UniPAX::UIBase, id_mysql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // UPBase base
    //
    object_traits_impl< ::UniPAX::UPBase, id_mysql >::init (o, i, db);

    // unipaxSource
    //
    {
      ::boost::shared_ptr< ::UniPAX::ImportSource >& v =
        o.unipaxSource;

      typedef object_traits< ::UniPAX::ImportSource > obj_traits;
      typedef odb::pointer_traits< ::boost::shared_ptr< ::UniPAX::ImportSource > > ptr_traits;

      if (i.unipaxSource_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        mysql::value_traits<
            obj_traits::id_type,
            mysql::id_ulonglong >::set_value (
          id,
          i.unipaxSource_value,
          i.unipaxSource_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<mysql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }
}

#include <odb/post.hxx>
