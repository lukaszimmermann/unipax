// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

// Begin prologue.
//
//
// End prologue.

#include <UNIPAX/PERSISTENCE/ORACLE/BIOPAX/CovalentBindingFeature-odb.hxx>

#include <cassert>
#include <cstring> // std::memcpy

#include <odb/cache-traits.hxx>
#include <odb/details/shared-ptr.hxx>

#include <odb/oracle/binding.hxx>
#include <odb/oracle/traits.hxx>
#include <odb/oracle/database.hxx>
#include <odb/oracle/transaction.hxx>
#include <odb/oracle/connection.hxx>
#include <odb/oracle/statement.hxx>
#include <odb/oracle/statement-cache.hxx>
#include <odb/oracle/object-statements.hxx>
#include <odb/oracle/container-statements.hxx>
#include <odb/oracle/exceptions.hxx>
#include <odb/oracle/result.hxx>

namespace odb
{
  // CovalentBindingFeature
  //

  // comment
  //

  const char access::object_traits< ::UniPAX::CovalentBindingFeature >::comment_traits::select_all_statement[] =
  "SELECT "
  "\"CovalentBindingFeature_comment\".\"index\","
  "\"CovalentBindingFeature_comment\".\"value\""
  " FROM \"CovalentBindingFeature_comment\" WHERE \"CovalentBindingFeature_comment\".\"object_id\"=:1"
  " ORDER BY \"CovalentBindingFeature_comment\".\"index\""
  ;

  const char access::object_traits< ::UniPAX::CovalentBindingFeature >::comment_traits::insert_one_statement[] =
  "INSERT INTO \"CovalentBindingFeature_comment\" ("
  "\"object_id\","
  "\"index\","
  "\"value\")"
  " VALUES (:1,:2,:3)";

  const char access::object_traits< ::UniPAX::CovalentBindingFeature >::comment_traits::delete_all_statement[] =
  "DELETE FROM \"CovalentBindingFeature_comment\""
  " WHERE \"object_id\"=:1";

  // evidence
  //

  const char access::object_traits< ::UniPAX::CovalentBindingFeature >::evidence_traits::select_all_statement[] =
  "SELECT "
  "\"CovalentBindingFeature_evidence\".\"index\","
  "\"CovalentBindingFeature_evidence\".\"value\""
  " FROM \"CovalentBindingFeature_evidence\" WHERE \"CovalentBindingFeature_evidence\".\"object_id\"=:1"
  " ORDER BY \"CovalentBindingFeature_evidence\".\"index\""
  ;

  const char access::object_traits< ::UniPAX::CovalentBindingFeature >::evidence_traits::insert_one_statement[] =
  "INSERT INTO \"CovalentBindingFeature_evidence\" ("
  "\"object_id\","
  "\"index\","
  "\"value\")"
  " VALUES (:1,:2,:3)";

  const char access::object_traits< ::UniPAX::CovalentBindingFeature >::evidence_traits::delete_all_statement[] =
  "DELETE FROM \"CovalentBindingFeature_evidence\""
  " WHERE \"object_id\"=:1";

  // id_memberFeature
  //

  const char access::object_traits< ::UniPAX::CovalentBindingFeature >::id_memberFeature_traits::select_all_statement[] =
  "SELECT "
  "\"CovalentBindingFeature_id_memberFeat\".\"index\","
  "\"CovalentBindingFeature_id_memberFeat\".\"value\""
  " FROM \"CovalentBindingFeature_id_memberFeat\" WHERE \"CovalentBindingFeature_id_memberFeat\".\"object_id\"=:1"
  " ORDER BY \"CovalentBindingFeature_id_memberFeat\".\"index\""
  ;

  const char access::object_traits< ::UniPAX::CovalentBindingFeature >::id_memberFeature_traits::insert_one_statement[] =
  "INSERT INTO \"CovalentBindingFeature_id_memberFeat\" ("
  "\"object_id\","
  "\"index\","
  "\"value\")"
  " VALUES (:1,:2,:3)";

  const char access::object_traits< ::UniPAX::CovalentBindingFeature >::id_memberFeature_traits::delete_all_statement[] =
  "DELETE FROM \"CovalentBindingFeature_id_memberFeat\""
  " WHERE \"object_id\"=:1";

  // id_featureLocation
  //

  const char access::object_traits< ::UniPAX::CovalentBindingFeature >::id_featureLocation_traits::select_all_statement[] =
  "SELECT "
  "\"CovalentBindingFeature_id_featureLoc\".\"index\","
  "\"CovalentBindingFeature_id_featureLoc\".\"value\""
  " FROM \"CovalentBindingFeature_id_featureLoc\" WHERE \"CovalentBindingFeature_id_featureLoc\".\"object_id\"=:1"
  " ORDER BY \"CovalentBindingFeature_id_featureLoc\".\"index\""
  ;

  const char access::object_traits< ::UniPAX::CovalentBindingFeature >::id_featureLocation_traits::insert_one_statement[] =
  "INSERT INTO \"CovalentBindingFeature_id_featureLoc\" ("
  "\"object_id\","
  "\"index\","
  "\"value\")"
  " VALUES (:1,:2,:3)";

  const char access::object_traits< ::UniPAX::CovalentBindingFeature >::id_featureLocation_traits::delete_all_statement[] =
  "DELETE FROM \"CovalentBindingFeature_id_featureLoc\""
  " WHERE \"object_id\"=:1";

  // featureLocationType
  //

  const char access::object_traits< ::UniPAX::CovalentBindingFeature >::featureLocationType_traits::select_all_statement[] =
  "SELECT "
  "\"CovalentBindingFeature_featureLocati\".\"index\","
  "\"CovalentBindingFeature_featureLocati\".\"value\""
  " FROM \"CovalentBindingFeature_featureLocati\" WHERE \"CovalentBindingFeature_featureLocati\".\"object_id\"=:1"
  " ORDER BY \"CovalentBindingFeature_featureLocati\".\"index\""
  ;

  const char access::object_traits< ::UniPAX::CovalentBindingFeature >::featureLocationType_traits::insert_one_statement[] =
  "INSERT INTO \"CovalentBindingFeature_featureLocati\" ("
  "\"object_id\","
  "\"index\","
  "\"value\")"
  " VALUES (:1,:2,:3)";

  const char access::object_traits< ::UniPAX::CovalentBindingFeature >::featureLocationType_traits::delete_all_statement[] =
  "DELETE FROM \"CovalentBindingFeature_featureLocati\""
  " WHERE \"object_id\"=:1";

  // id_bindsTo
  //

  const char access::object_traits< ::UniPAX::CovalentBindingFeature >::id_bindsTo_traits::select_all_statement[] =
  "SELECT "
  "\"CovalentBindingFeature_id_bindsTo\".\"index\","
  "\"CovalentBindingFeature_id_bindsTo\".\"value\""
  " FROM \"CovalentBindingFeature_id_bindsTo\" WHERE \"CovalentBindingFeature_id_bindsTo\".\"object_id\"=:1"
  " ORDER BY \"CovalentBindingFeature_id_bindsTo\".\"index\""
  ;

  const char access::object_traits< ::UniPAX::CovalentBindingFeature >::id_bindsTo_traits::insert_one_statement[] =
  "INSERT INTO \"CovalentBindingFeature_id_bindsTo\" ("
  "\"object_id\","
  "\"index\","
  "\"value\")"
  " VALUES (:1,:2,:3)";

  const char access::object_traits< ::UniPAX::CovalentBindingFeature >::id_bindsTo_traits::delete_all_statement[] =
  "DELETE FROM \"CovalentBindingFeature_id_bindsTo\""
  " WHERE \"object_id\"=:1";

  void access::object_traits< ::UniPAX::CovalentBindingFeature >::
  bind (oracle::bind* b, image_type& i, oracle::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace oracle;

    std::size_t n (0);

    // BindingFeature base
    //
    object_traits< ::UniPAX::BindingFeature >::bind (b + n, i, sk);
    n += 3UL - (
      sk == statement_select ? 0 : (
        sk == statement_insert ? 0 : 1UL));
  }

  bool access::object_traits< ::UniPAX::CovalentBindingFeature >::
  init (image_type& i, const object_type& o, oracle::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace oracle;

    if (i.change_callback_.callback != 0)
      (i.change_callback_.callback) (i.change_callback_.context);

    bool grew (false);

    // BindingFeature base
    //
    if (object_traits< ::UniPAX::BindingFeature >::init (i, o, sk))
      grew = true;

    return grew;
  }

  void access::object_traits< ::UniPAX::CovalentBindingFeature >::
  init (object_type& o, const image_type& i, database& db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // BindingFeature base
    //
    object_traits< ::UniPAX::BindingFeature >::init (o, i, db);
  }

  struct access::object_traits< ::UniPAX::CovalentBindingFeature >::container_statement_cache_type
  {
    oracle::container_statements_impl< comment_traits > comment;
    oracle::container_statements_impl< evidence_traits > evidence;
    oracle::container_statements_impl< id_memberFeature_traits > id_memberFeature;
    oracle::container_statements_impl< id_featureLocation_traits > id_featureLocation;
    oracle::container_statements_impl< featureLocationType_traits > featureLocationType;
    oracle::container_statements_impl< id_bindsTo_traits > id_bindsTo;

    container_statement_cache_type (oracle::connection& c)
    : comment (c),
      evidence (c),
      id_memberFeature (c),
      id_featureLocation (c),
      featureLocationType (c),
      id_bindsTo (c)
    {
    }
  };

  const char access::object_traits< ::UniPAX::CovalentBindingFeature >::persist_statement[] =
  "INSERT INTO \"CovalentBindingFeature\" ("
  "\"unipaxId\","
  "\"unipaxSource\","
  "\"intraMolecular\")"
  " VALUES (:1,:2,:3)";

  const char access::object_traits< ::UniPAX::CovalentBindingFeature >::find_statement[] =
  "SELECT "
  "\"CovalentBindingFeature\".\"unipaxId\","
  "\"CovalentBindingFeature\".\"unipaxSource\","
  "\"CovalentBindingFeature\".\"intraMolecular\""
  " FROM \"CovalentBindingFeature\""
  " WHERE \"CovalentBindingFeature\".\"unipaxId\"=:1";

  const char access::object_traits< ::UniPAX::CovalentBindingFeature >::update_statement[] =
  "UPDATE \"CovalentBindingFeature\" SET "
  "\"unipaxSource\"=:1,"
  "\"intraMolecular\"=:2"
  " WHERE \"unipaxId\"=:3";

  const char access::object_traits< ::UniPAX::CovalentBindingFeature >::erase_statement[] =
  "DELETE FROM \"CovalentBindingFeature\""
  " WHERE \"unipaxId\"=:1";

  const char access::object_traits< ::UniPAX::CovalentBindingFeature >::query_statement[] =
  "SELECT "
  "\"CovalentBindingFeature\".\"unipaxId\","
  "\"CovalentBindingFeature\".\"unipaxSource\","
  "\"CovalentBindingFeature\".\"intraMolecular\""
  " FROM \"CovalentBindingFeature\""
  " LEFT JOIN \"ImportSource\" \"unipaxSource\" ON \"unipaxSource\".\"unipaxId\" = \"CovalentBindingFeature\".\"unipaxSource\""
  " ";

  const char access::object_traits< ::UniPAX::CovalentBindingFeature >::erase_query_statement[] =
  "DELETE FROM \"CovalentBindingFeature\""
  " ";

  const char access::object_traits< ::UniPAX::CovalentBindingFeature >::table_name[] =
  "\"CovalentBindingFeature\"";

  void access::object_traits< ::UniPAX::CovalentBindingFeature >::
  persist (database&, const object_type& obj)
  {
    using namespace oracle;

    oracle::connection& conn (
      oracle::transaction::current ().connection ());
    object_statements< object_type >& sts (
      conn.statement_cache ().find_object<object_type> ());
    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () || imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    id_image_type& i (sts.id_image ());
    init (i, obj.unipaxId);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    comment_traits::persist (
      obj.comment,
      idb,
      sts.container_statment_cache ().comment);

    evidence_traits::persist (
      obj.evidence,
      idb,
      sts.container_statment_cache ().evidence);

    id_memberFeature_traits::persist (
      obj.id_memberFeature,
      idb,
      sts.container_statment_cache ().id_memberFeature);

    id_featureLocation_traits::persist (
      obj.id_featureLocation,
      idb,
      sts.container_statment_cache ().id_featureLocation);

    featureLocationType_traits::persist (
      obj.featureLocationType,
      idb,
      sts.container_statment_cache ().featureLocationType);

    id_bindsTo_traits::persist (
      obj.id_bindsTo,
      idb,
      sts.container_statment_cache ().id_bindsTo);
  }

  void access::object_traits< ::UniPAX::CovalentBindingFeature >::
  update (database&, const object_type& obj)
  {
    using namespace oracle;

    oracle::connection& conn (
      oracle::transaction::current ().connection ());
    object_statements< object_type >& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, obj.unipaxId);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () || imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.update_id_image_version () || idb.version == 0)
    {
      if (i.version != sts.id_image_version () || idb.version == 0)
      {
        bind (idb.bind, i);
        sts.id_image_version (i.version);
        idb.version++;
      }

      sts.update_id_image_version (i.version);

      if (!u)
        imb.version++;
    }

    if (sts.update_statement ().execute () == 0)
      throw object_not_persistent ();

    comment_traits::update (
      obj.comment,
      idb,
      sts.container_statment_cache ().comment);

    evidence_traits::update (
      obj.evidence,
      idb,
      sts.container_statment_cache ().evidence);

    id_memberFeature_traits::update (
      obj.id_memberFeature,
      idb,
      sts.container_statment_cache ().id_memberFeature);

    id_featureLocation_traits::update (
      obj.id_featureLocation,
      idb,
      sts.container_statment_cache ().id_featureLocation);

    featureLocationType_traits::update (
      obj.featureLocationType,
      idb,
      sts.container_statment_cache ().featureLocationType);

    id_bindsTo_traits::update (
      obj.id_bindsTo,
      idb,
      sts.container_statment_cache ().id_bindsTo);
  }

  void access::object_traits< ::UniPAX::CovalentBindingFeature >::
  erase (database&, const id_type& id)
  {
    using namespace oracle;

    oracle::connection& conn (
      oracle::transaction::current ().connection ());
    object_statements< object_type >& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    comment_traits::erase (
      idb,
      sts.container_statment_cache ().comment);

    evidence_traits::erase (
      idb,
      sts.container_statment_cache ().evidence);

    id_memberFeature_traits::erase (
      idb,
      sts.container_statment_cache ().id_memberFeature);

    id_featureLocation_traits::erase (
      idb,
      sts.container_statment_cache ().id_featureLocation);

    featureLocationType_traits::erase (
      idb,
      sts.container_statment_cache ().featureLocationType);

    id_bindsTo_traits::erase (
      idb,
      sts.container_statment_cache ().id_bindsTo);

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();
  }

  access::object_traits< ::UniPAX::CovalentBindingFeature >::pointer_type
  access::object_traits< ::UniPAX::CovalentBindingFeature >::
  find (database& db, const id_type& id)
  {
    using namespace oracle;

    oracle::connection& conn (
      oracle::transaction::current ().connection ());
    object_statements< object_type >& sts (
      conn.statement_cache ().find_object<object_type> ());
    object_statements< object_type >::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory< object_type, pointer_type  >::create ());
    pointer_traits< pointer_type >::guard pg (p);
    pointer_cache_traits< pointer_type >::insert_guard ig (
      pointer_cache_traits< pointer_type >::insert (db, id, p));
    object_type& obj (pointer_traits< pointer_type >::get_ref (p));

    if (l.locked ())
    {
      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), db);
      sts.find_statement ().stream_result ();
      load_ (sts, obj);
      sts.load_delayed ();
      l.unlock ();
      callback (db, obj, callback_event::post_load);
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits< ::UniPAX::CovalentBindingFeature >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace oracle;

    oracle::connection& conn (
      oracle::transaction::current ().connection ());
    object_statements< object_type >& sts (
      conn.statement_cache ().find_object<object_type> ());

    object_statements< object_type >::auto_lock l (sts);

    if (!find_ (sts, id))
      return false;

    reference_cache_traits< object_type >::insert_guard ig (
      reference_cache_traits< object_type >::insert (db, id, obj));

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), db);
    sts.find_statement ().stream_result ();
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    ig.release ();
    return true;
  }

  bool access::object_traits< ::UniPAX::CovalentBindingFeature >::
  reload (database& db, object_type& obj)
  {
    using namespace oracle;

    oracle::connection& conn (
      oracle::transaction::current ().connection ());
    object_statements< object_type >& sts (
      conn.statement_cache ().find_object<object_type> ());

    object_statements< object_type >::auto_lock l (sts);

    if (!find_ (sts, obj.unipaxId))
      return false;

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), db);
    sts.find_statement ().stream_result ();
    load_ (sts, obj);
    sts.load_delayed ();
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits< ::UniPAX::CovalentBindingFeature >::
  find_ (oracle::object_statements< object_type >& sts, const id_type& id)
  {
    using namespace oracle;

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () || imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());
    st.execute ();
    select_statement::result r (st.fetch ());
    st.free_result ();
    return r != select_statement::no_data;
  }

  void access::object_traits< ::UniPAX::CovalentBindingFeature >::
  load_ (oracle::object_statements< object_type >& sts, object_type& obj)
  {
    oracle::binding& idb (sts.id_image_binding ());

    comment_traits::load (
      obj.comment,
      idb,
      sts.container_statment_cache ().comment);

    evidence_traits::load (
      obj.evidence,
      idb,
      sts.container_statment_cache ().evidence);

    id_memberFeature_traits::load (
      obj.id_memberFeature,
      idb,
      sts.container_statment_cache ().id_memberFeature);

    id_featureLocation_traits::load (
      obj.id_featureLocation,
      idb,
      sts.container_statment_cache ().id_featureLocation);

    featureLocationType_traits::load (
      obj.featureLocationType,
      idb,
      sts.container_statment_cache ().featureLocationType);

    id_bindsTo_traits::load (
      obj.id_bindsTo,
      idb,
      sts.container_statment_cache ().id_bindsTo);
  }

  result< access::object_traits< ::UniPAX::CovalentBindingFeature >::object_type >
  access::object_traits< ::UniPAX::CovalentBindingFeature >::
  query (database&, const query_base_type& q)
  {
    using namespace oracle;
    using odb::details::shared;
    using odb::details::shared_ptr;

    oracle::connection& conn (
      oracle::transaction::current ().connection ());

    object_statements< object_type >& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () || imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement + q.clause (),
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) oracle::object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits< ::UniPAX::CovalentBindingFeature >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace oracle;

    oracle::connection& conn (
      oracle::transaction::current ().connection ());

    delete_statement st (
      conn,
      erase_query_statement + q.clause (),
      q.parameters_binding ());

    return st.execute ();
  }
}

// Begin epilogue.
//
//
// End epilogue.

#include <odb/post.hxx>
